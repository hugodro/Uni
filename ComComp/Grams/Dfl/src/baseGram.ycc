/******************************************************************************
* Fichier: baseGram.y
* Desc: grammaire en yacc pour compiler le langage Dflat.
* Module: AkraLog : JavaKit.
* Revision: 10 avril 2001 : REV 0 : Hugo DesRosiers : Creation.
******************************************************************************/

%{
/* On met ici les declaration et les fichiers inclus */

#include <stdlib.h>		// For free.

#include <akra/portableDefs.h>
#include "customFlex.h"
#include "statements.h"
#include "expressions.h"
#include "typeDef.h"
#include "varDecl.h"
#include "listStmts.h"

class StatementSrp;
class ExpressionSrp;
class BaseIdentifierSrp;
class LiteralSrp;
class BlockListAk;
class TypeDefinition;
class VarDeclarationSrp;
class ClauseHolderSrp;
class CatchStmtHelper;


extern int srplex();
extern void srperror(char *);

#define YYDEBUG	1

%}

/**************************************************************
* Keywords of the language, and other meta-characters.
**************************************************************/

%token ABSTRACT_KW
%token BASE_KW
%token BOOL_KW
%token BREAK_KW
%token BYTE_KW
%token CASE_KW
%token CATCH_KW
%token CHAR_KW
%token CHECKED_KW
%token CLASS_KW
%token CONST_KW
%token CONTINUE_KW
%token DECIMAL_KW
%token DEFAULT_KW
%token DELEGATE_KW
%token DO_KW
%token DOUBLE_KW
%token ELSE_KW
%token ENUM_KW
%token EVENT_KW
%token EXPLICIT_KW
%token EXTERN_KW
%token FALSE_KW
%token FINALLY_KW
%token FIXED_KW
%token FLOAT_KW
%token FOR_KW
%token FOREACH_KW
%token GOTO_KW
%token IF_KW
%token IMPLICIT_KW
%token IN_KW
%token INT_KW
%token INTERFACE_KW
%token INTERNAL_KW
%token IS_KW
%token LOCK_KW
%token LONG_KW
%token NAMESPACE_KW
%token NEW_KW
%token NULL_KW
%token OBJECT_KW
%token OPERATOR_KW
%token OUT_KW
%token OVERRIDE_KW
%token PARAMS_KW
%token PRIVATE_KW
%token PROTECTED_KW
%token PUBLIC_KW
%token READONLY_KW
%token REF_KW
%token RETURN_KW
%token SBYTE_KW
%token SEALED_KW
%token SHORT_KW
%token SIZEOF_KW
%token STATIC_KW
%token STRING_KW
%token STRUCT_KW
%token SWITCH_KW
%token THIS_KW
%token THROW_KW
%token TRUE_KW
%token TRY_KW
%token TYPEOF_KW
%token UINT_KW
%token ULONG_KW
%token UNCHECKED_KW
%token UNSAFE_KW
%token USHORT_KW
%token USING_KW
%token VIRTUAL_KW
%token VOID_KW
%token WHILE_KW


/**************************************************************
* Other C# reserved words (not mentioned in C# document).
**************************************************************/
%token SET_KW
%token GET_KW


/**************************************************************
* Multi-characters symbols.
**************************************************************/

%token EQ_OP
%token NE_OP
%token LE_OP
%token GE_OP
%token ANDCON_OP
%token ORCON_OP
%token INCR_OP
%token DECR_OP
%token LSHIFT_OP
%token RSHIFT_OP
%token PLUSEQ_OP
%token MINUSEQ_OP
%token MULTEQ_OP
%token DIVEQ_OP
%token MODEQ_OP
%token ANDEQ_OP
%token OREQ_OP
%token NOTEQ_OP
%token LSHIFTEQ_OP
%token RSHIFTEQ_OP

/*******************************
* Literals.
*******************************/

%token BOOLEAN_LITERAL
%token INTEGER_LITERAL
%token REAL_LITERAL
%token CHARACTER_LITERAL
%token STRING_LITERAL
%token NULL_LITERAL
%token IDENTIFIER


%union
{
    bool boolValue;
    int integerNumber;
    unsigned int flag;
    float floatNumber;
    int longNumber[2];
    double doubleNumber;
    LiteralSrp *literal;
    BaseIdentifierSrp *identifier;
    StatementSrp *statement;
    ExpressionSrp *expression;
    BlockListAk *blList;
    TypeDefinition *typeDef;
    VarDeclarationSrp *varDecl;
    ClauseHolderSrp *clauseHolder;
    CatchStmtHelper *catchHelper;
}

%type <literal> literal INTEGER_LITERAL REAL_LITERAL CHARACTER_LITERAL
%type <literal> STRING_LITERAL NULL_LITERAL BOOLEAN_LITERAL

%type <identifier> IDENTIFIER identifier identifier.Opt
%type <identifier> dottedIdentifier
%type <identifier> namespace_name type_name namespace_or_type_name simple_name
%type <identifier> attribute_name member_name

%type <statement> statement labeled_statement declaration_statement
%type <statement> embedded_statement block empty_statement expression_statement
%type <statement> selection_statement iteration_statement jump_statement try_statement
%type <statement> checked_statement unchecked_statement lock_statement
%type <statement> if_statement switch_statement while_statement
%type <statement> do_statement for_statement foreach_statement break_statement
%type <statement> continue_statement goto_statement return_statement throw_statement
%type <statement> switch_section general_catch_clause general_catch_clause.Opt finally_clause
%type <statement> method_body accessor_body

%type <blList> statement_list statement_list.Opt 
%type <blList> argument_list argument_list.Opt
%type <blList> expression_list blockExprList blockExprList.Opt switch_labels
%type <blList> variable_declarators local_variable_declaration
%type <blList> variable_initializer_list variable_initializer_list.Opt
%type <blList> switch_sections switch_sections.Opt switch_block
%type <blList> for_initializer for_initializer.Opt for_iterator for_iterator.Opt
%type <blList> statement_expression_list specific_catch_clauses specific_catch_clauses.Opt
%type <blList> rank_specifiers rank_specifiers.Opt

%type <expression> statement_expression expression.Opt invocation_expression
%type <expression> assignment post_increment_expression post_decrement_expression
%type <expression> pre_increment_expression pre_decrement_expression
%type <expression> primary_expression expression parenthesized_expression
%type <expression> member_access invocation_expression argument
%type <expression> element_access this_access base_access
%type <expression> post_increment_expression post_decrement_expression
%type <expression> new_expression typeof_expression sizeof_expression
%type <expression> checked_expression unchecked_expression
%type <expression> unary_expression pre_increment_expression pre_decrement_expression
%type <expression> cast_expression shift_expression additive_expression multiplicative_expression
%type <expression> exclusive_or_expression and_expression equality_expression
%type <expression> relational_expression conditional_expression
%type <expression> conditional_or_expression conditional_and_expression inclusive_or_expression
%type <expression> constant_expression boolean_expression variable_reference
%type <expression> object_creation_expression array_creation_expression delegate_creation_expression
%type <expression> array_initializer array_initializer.Opt variable_initializer switch_label
%type <expression> for_condition for_condition.Opt

%type <typeDef> predefined_type type non_array_type array_type value_type pointer_type
%type <typeDef> struct_type simple_type numeric_type integral_type
%type <typeDef> floating_point_type class_type reference_type return_type unmanaged_type

%type <varDecl> variable_declarator

%type <integerNumber> assignment_operator dim_separators.Opt dim_separators rank_specifier

%type <clauseHolder> catch_clauses
%type <catchHelper> specific_catch_clause

%start compilation_unit

/* --------------- Beginning of the grammar. --------------- */
%%

literal:
	BOOLEAN_LITERAL
	| INTEGER_LITERAL
	| REAL_LITERAL
	| CHARACTER_LITERAL
	| STRING_LITERAL
	| NULL_LITERAL


namespace_name:
	dottedIdentifier


type_name:
	dottedIdentifier


namespace_or_type_name:
	dottedIdentifier


type:
	non_array_type
	| array_type

non_array_type:
	value_type
	| OBJECT_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::objectBt); }
	| STRING_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::stringBt); }
	| pointer_type


value_type:
	struct_type


struct_type:
	type_name
  { $$= new UnresolvedType($1); }
	| simple_type


simple_type:
	numeric_type
	| BOOL_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::boolBt); }


numeric_type:
	integral_type
	| floating_point_type
	| DECIMAL_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::decimalBt); }


integral_type:
	SBYTE_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::sbyteBt); }
	| BYTE_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::byteBt); }
	| SHORT_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::shortBt); }
	| USHORT_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::ushortBt); }
	| INT_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::intBt); }
	| UINT_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::uintBt); }
	| LONG_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::longBt); }
	| ULONG_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::ulongBt); }
	| CHAR_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::charBt); }


floating_point_type:
	FLOAT_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::floatBt); }
	| DOUBLE_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::doubleBt); }


reference_type:
	class_type
	| array_type


class_type:
	type_name
  { $$= new UnresolvedType($1); }
	| OBJECT_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::objectBt); }
	| STRING_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::stringBt); }


/* Repetition:
array_type:
	non_array_type rank_specifiers
*/


/* Repetition:
rank_specifiers:
	rank_specifier
	| rank_specifiers rank_specifier
*/

/* Repetition:
rank_specifier:
	'[' dim_separators.Opt ']'
*/

/* Repetition:
dim_separators:
	','
	| dim_separators ','
*/

variable_reference:
	expression


argument_list:
	argument
  { $$= new ListExprBl($1); }
	| argument_list ',' argument
  { $$->add($3); }


argument:
	expression
	| REF_KW variable_reference
  { $$= new ModifiedArgExpr($2, ModifiedArgExpr::refMod); }
	| OUT_KW variable_reference
  { $$= new ModifiedArgExpr($2, ModifiedArgExpr::outMod); }


primary_expression:
	literal
  { $$= new LiteralExpr($1); }
	| simple_name
  { $$= new SymbolExpr($1); }
	| parenthesized_expression
	| member_access
	| invocation_expression
	| element_access
	| this_access
	| base_access
	| post_increment_expression
	| post_decrement_expression
	| new_expression
	| typeof_expression
	| sizeof_expression
	| checked_expression
	| unchecked_expression


simple_name:
	identifier

parenthesized_expression:
	'(' expression ')'
  { $$= new ParenExpr($2); }

member_access:
	primary_expression '.' identifier
  { $$= new MemberAccessExpr($1, $3); }
	| predefined_type '.' identifier
  { $$= new MemberAccessExpr($1, $3); }


predefined_type:
	BOOL_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::boolBt); }
	| BYTE_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::byteBt); }
	| CHAR_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::charBt); }
	| DECIMAL_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::decimalBt); }
	| DOUBLE_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::doubleBt); }
	| FLOAT_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::floatBt); }
	| INT_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::intBt); }
	| LONG_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::longBt); }
	| OBJECT_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::objectBt); }
	| SBYTE_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::sbyteBt); }
	| SHORT_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::shortBt); }
	| STRING_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::stringBt); }
	| UINT_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::uintBt); }
	| ULONG_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::ulongBt); }
	| USHORT_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::ushortBt); }


invocation_expression:
	primary_expression '(' argument_list.Opt ')'
  {
    // Warning: check cast on $3.
    $$= new InvokeExpr($1, (ListExprBl *)$3);
  }


element_access:
	primary_expression blockExprList
  {
    // Warning: check cast on $2.
    $$= new ArrayAccessExpr($1, (ListExprBl *)$2);
  }


expression_list:
	expression
  { $$= new ListExprBl($1); }
	| expression_list ',' expression
  { $$->add($3); }


this_access:
	THIS_KW
  { $$= SymbolExpr::getSpecialSymbol(SymbolExpr::baseSym); }


base_access:
	BASE_KW '.' identifier
  { $$= new MemberAccessExpr(SymbolExpr::getSpecialSymbol(SymbolExpr::baseSym), $3); }
	| BASE_KW blockExprList
  {
    // Warning: check cast on $2.
    $$= new ArrayAccessExpr(SymbolExpr::getSpecialSymbol(SymbolExpr::baseSym), (ListExprBl *)$2);
  }


post_increment_expression:
	primary_expression INCR_OP
  { $$= new PrePostExpr($1, PrePostExpr::postIncr); }


post_decrement_expression:
	primary_expression DECR_OP
  { $$= new PrePostExpr($1, PrePostExpr::postDecr); }


new_expression:
	object_creation_expression
	| array_creation_expression
	| delegate_creation_expression


object_creation_expression:
	NEW_KW type '(' argument_list.Opt ')'
  {
    // Warning: check cast on $4.
    $$= new NewInstExpr($2, (ListExprBl *)$4);
  }


array_creation_expression:
	/* syntax: if blockExprList is not ther, then rank and array init must be. */
	NEW_KW non_array_type   blockExprList.Opt   rank_specifiers.Opt   array_initializer.Opt
  {
    // Warning: check casts on $3, $4.
    $$= new NewInstExpr($2, (ListExprBl *)$3, (ListSizesBl *)$4, $5);
  }


delegate_creation_expression:
	NEW_KW dottedIdentifier '(' expression ')'
  { $$= new NewInstExpr($2, $4); }


typeof_expression:
	TYPEOF_KW '(' type ')'
  { $$= new OperatorExpr($3, OperatorExpr::typeofOp); }


sizeof_expression:
	SIZEOF_KW '(' type ')'
  { $$= new OperatorExpr($3, OperatorExpr::sizeofOp); }

checked_expression:
	CHECKED_KW '(' expression ')'
  { $$= new OperatorExpr($3, OperatorExpr::checkedOp); }


unchecked_expression:
	UNCHECKED_KW '(' expression ')'
  { $$= new OperatorExpr($3, OperatorExpr::uncheckedOp); }


unary_expression:
	primary_expression
	| '+' unary_expression
  { $$= new OperatorExpr($2, OperatorExpr::addOp); }
	| '-' unary_expression
  { $$= new OperatorExpr($2, OperatorExpr::subOp); }
	| '!' unary_expression
  { $$= new OperatorExpr($2, OperatorExpr::notOp); }
	| '~' unary_expression
  { $$= new OperatorExpr($2, OperatorExpr::xorOp); }
	| '*' unary_expression
  { $$= new OperatorExpr($2, OperatorExpr::multOp); }
	| '&' unary_expression
  { $$= new OperatorExpr($2, OperatorExpr::andOp); }
	| pre_increment_expression
	| pre_decrement_expression
	| cast_expression


pre_increment_expression:
	INCR_OP unary_expression
  { $$= new PrePostExpr($2, PrePostExpr::preIncr); }


pre_decrement_expression:
	DECR_OP unary_expression
  { $$= new PrePostExpr($2, PrePostExpr::preDecr); }


cast_expression:
	'(' type ')' unary_expression
  { $$= new CastExpr($2, $4); }


multiplicative_expression:
	unary_expression
	| multiplicative_expression '*' unary_expression
  { $$= new BinaryExpr(OperatorExpr::multOp, $1, $3); }
	| multiplicative_expression '/' unary_expression
  { $$= new BinaryExpr(OperatorExpr::divOp, $1, $3); }
	| multiplicative_expression '%' unary_expression
  { $$= new BinaryExpr(OperatorExpr::modOp, $1, $3); }


additive_expression:
	multiplicative_expression
	| additive_expression '+' multiplicative_expression
  { $$= new BinaryExpr(OperatorExpr::addOp, $1, $3); }
	| additive_expression '-' multiplicative_expression
  { $$= new BinaryExpr(OperatorExpr::subOp, $1, $3); }


shift_expression:
	additive_expression 
	| shift_expression LSHIFT_OP additive_expression
  { $$= new BinaryExpr(OperatorExpr::leftShiftOp, $1, $3); }
	| shift_expression RSHIFT_OP additive_expression
  { $$= new BinaryExpr(OperatorExpr::rightShiftOp, $1, $3); }


relational_expression:
	shift_expression
	| relational_expression '<' shift_expression
  { $$= new BinaryExpr(OperatorExpr::ltOp, $1, $3); }
	| relational_expression '>' shift_expression
  { $$= new BinaryExpr(OperatorExpr::gtOp, $1, $3); }
	| relational_expression LE_OP shift_expression
  { $$= new BinaryExpr(OperatorExpr::leOp, $1, $3); }
	| relational_expression GE_OP shift_expression
  { $$= new BinaryExpr(OperatorExpr::geOp, $1, $3); }
	| relational_expression IS_KW reference_type
  { $$= new TypeCheckExpr($1, $3); }


equality_expression:
	relational_expression
	| equality_expression EQ_OP relational_expression
  { $$= new BinaryExpr(OperatorExpr::eqOp, $1, $3); }
	| equality_expression NE_OP relational_expression
  { $$= new BinaryExpr(OperatorExpr::neOp, $1, $3); }


and_expression:
	equality_expression
	| and_expression '&' equality_expression
  { $$= new BinaryExpr(OperatorExpr::andOp, $1, $3); }


exclusive_or_expression:
	and_expression
	| exclusive_or_expression '^' and_expression
  { $$= new BinaryExpr(OperatorExpr::xorOp, $1, $3); }


inclusive_or_expression:
	exclusive_or_expression
	| inclusive_or_expression '|' exclusive_or_expression
  { $$= new BinaryExpr(OperatorExpr::orOp, $1, $3); }


conditional_and_expression:
	inclusive_or_expression
	| conditional_and_expression ANDCON_OP inclusive_or_expression
  { $$= new BinaryExpr(OperatorExpr::andCndOp, $1, $3); }


conditional_or_expression:
	conditional_and_expression
	| conditional_or_expression ORCON_OP conditional_and_expression
  { $$= new BinaryExpr(OperatorExpr::orCndOp, $1, $3); }


conditional_expression:
	conditional_or_expression
	| conditional_or_expression '?' expression ':' expression
  { $$= new TernaryExpr($1, $3, $5); }


assignment:
	unary_expression assignment_operator expression
  { $$= new AssignExpr((OperatorExpr::Operators)$2, $1, $3); }


assignment_operator:
	'='
  { $$= OperatorExpr::assignOp; }
	| PLUSEQ_OP
  { $$= OperatorExpr::addOp; }
	| MINUSEQ_OP
  { $$= OperatorExpr::subOp; }
	| MULTEQ_OP
  { $$= OperatorExpr::multOp; }
	| DIVEQ_OP
  { $$= OperatorExpr::divOp; }
	| MODEQ_OP
  { $$= OperatorExpr::modOp; }
	| ANDEQ_OP
  { $$= OperatorExpr::andOp; }
	| OREQ_OP
  { $$= OperatorExpr::orOp; }
	| NOTEQ_OP
  { $$= OperatorExpr::xorOp; }
	| LSHIFTEQ_OP
  { $$= OperatorExpr::leftShiftOp; }
	| RSHIFTEQ_OP
  { $$= OperatorExpr::rightShiftOp; }


expression:
	conditional_expression
	| assignment


constant_expression:
	expression


boolean_expression:
	expression


statement:
	labeled_statement
	| declaration_statement
	| embedded_statement


embedded_statement:
	block
	| empty_statement
	| expression_statement
	| selection_statement
	| iteration_statement
	| jump_statement
	| try_statement
	| checked_statement
	| unchecked_statement
	| lock_statement


block:
	'{' statement_list.Opt '}'
  {
    // TODO: Make sure that ListStmtBl>BlockListAk.
    $$= new BlockStmt((ListStmtBl *)$2);
  }


statement_list:
	statement
  { $$= new ListStmtBl($1); }
	| statement_list statement
  { $1->add($2); }


empty_statement:
	';'
  { $$= new EmptyStatement(); }

labeled_statement:
	identifier ':' statement
  { $$= new LabeledStmt($1, $3); }


declaration_statement:
	local_variable_declaration ';'
  { 
    // TODO: Make sure that ListVarDeclBl>BlockListAk.
    $$= new DeclarationStmt((ListVarDeclBl *)$1);
  }
	| local_constant_declaration ';'
  { $$= new DeclarationStmt(NULL /* TMPTMP */); /* TODO */ }


local_variable_declaration:
	type variable_declarators
  {
    ((ListVarDeclBl *)$2)->broadcastType($1);
    $$= $2;
  }


variable_declarators:
	variable_declarator
  {
     $$= new ListVarDeclBl($1);
  }
	| variable_declarators ',' variable_declarator
  { $$->add($3); }


variable_declarator:
	identifier
  {
    // TODO: Make sure that IdentifierSrp>BaseIdentifierSrp.
    $$= new VarDeclarationSrp((IdentifierSrp *)$1);
  }
	| identifier '=' variable_initializer
  {
    // TODO: Make sure that IdentifierSrp>BaseIdentifierSrp.
    $$= new VarDeclarationSrp((IdentifierSrp *)$1, $3);
  }


/* Repetition:
variable_initializer:
	expression
	| array_initializer
*/

local_constant_declaration:
	CONST_KW type constant_declarators


constant_declarators:
	constant_declarator
	| constant_declarators ',' constant_declarator


constant_declarator:
	identifier '=' constant_expression
	{/* TODO */}


expression_statement:
	statement_expression ';'
  { $$= new ExpressionStmt($1); }


statement_expression:
	invocation_expression
	| object_creation_expression
	| assignment
	| post_increment_expression
	| post_decrement_expression
	| pre_increment_expression
	| pre_decrement_expression


selection_statement:
	if_statement
	| switch_statement


if_statement:
	IF_KW '(' boolean_expression ')' embedded_statement
  { $$= new IfStmt($3, $5, NULL); }
	| IF_KW '(' boolean_expression ')' embedded_statement ELSE_KW embedded_statement
  { $$= new IfStmt($3, $5, $7); }


switch_statement:
	SWITCH_KW '(' expression ')' switch_block
  { 
    // TODO: Make sure that $5 is ListStmtBl>BlockListAk.
    $$= new SwitchStmt($3, (ListStmtBl *)$5);
  }


switch_block:
	'{' switch_sections.Opt '}'
  { $$= $2; }


switch_sections:
	switch_section
  { $$= new ListStmtBl($1); }
	| switch_sections switch_section
  { $$->add($2); }


switch_section:
	switch_labels statement_list
  {
    // TODO: Make sure that ListExprBl>BlockListAk.
    $$= new LabeledStmt((ListExprBl *)$1, (ListStmtBl *)$2);
  }


switch_labels:
	switch_label
  { $$= new ListExprBl($1); }
	| switch_labels switch_label
  { $$->add($2); }


switch_label:
	CASE_KW constant_expression ':'
  { $$= $2; }
	| DEFAULT_KW ':'
  { $$= new ExpressionSrp(); }


iteration_statement:
	while_statement
	| do_statement
	| for_statement
	| foreach_statement


while_statement:
	WHILE_KW '(' boolean_expression ')' embedded_statement
  { $$= new WhileStmt($3, $5); }


do_statement:
	DO_KW embedded_statement WHILE_KW '(' boolean_expression ')' ';'
  { $$= new DoStmt($5, $2); }


for_statement:
	FOR_KW '(' for_initializer.Opt ';' for_condition.Opt ';' for_iterator.Opt ')' embedded_statement
  {
    // TODO: Make sure that ListStmtBl>BLockListAk.
    $$= new ForStmt($3, $5, (ListStmtBl *)$7, $9);
  }

for_initializer:
	local_variable_declaration
	| statement_expression_list


for_condition:
	boolean_expression


for_iterator:
	statement_expression_list


statement_expression_list:
	statement_expression
  { $$= new ListStmtBl(new ExpressionStmt($1)); }
	| statement_expression_list ',' statement_expression
  { $$->add(new ExpressionStmt($3)); }


foreach_statement:
	FOREACH_KW '(' type identifier IN_KW expression ')' embedded_statement
  {
     // TODO: Make sure that IdentifierSrp>BaseIdentifierSrp.
     $$= new ForEachStmt($3, (IdentifierSrp *)$4, $6, $8);
  }


jump_statement:
	break_statement
	| continue_statement
	| goto_statement
	| return_statement
	| throw_statement


break_statement:
	BREAK_KW ';'
  { $$= new JumpStmt(DictStatements::breakSt); }


continue_statement:
	CONTINUE_KW ';'
  { $$= new JumpStmt(DictStatements::continueSt); }


goto_statement:
	GOTO_KW identifier ';'
  {
    // TODO: Make sure that IdentifierSrp>BaseIdentifierSrp.
    $$= new GotoStmt((IdentifierSrp *)$2);
  }
	| GOTO_KW CASE_KW constant_expression ';'
  { $$= new GotoStmt($3); }
	| GOTO_KW DEFAULT_KW ';'
  { $$= new GotoStmt(new ExpressionSrp()); }


return_statement:
	RETURN_KW expression.Opt ';'
  { $$= new ReturnStmt($2); }


throw_statement:
	THROW_KW expression.Opt ';'
  { $$= new ThrowStmt($2); }


try_statement:
	TRY_KW block catch_clauses
  {
    // TODO: Must make sure that BlockStmt>StatementSrp.
    $$= new TryCatchStmt((BlockStmt *)$2, $3->getSpecificClauses(), $3->getGeneralClause(), NULL);
  }
	| TRY_KW block finally_clause
  { $$= new TryCatchStmt((BlockStmt *)$2, NULL, NULL, (BlockStmt *)$3); }
	| TRY_KW block catch_clauses finally_clause
  { $$= new TryCatchStmt((BlockStmt *)$2, $3->getSpecificClauses(), $3->getGeneralClause(), (BlockStmt *)$4); }


catch_clauses:
	specific_catch_clauses general_catch_clause.Opt
  {
    // TODO: Make sure that ListSpecCatchBl>BlockListAk.
    // TODO: Make sure that BlockStmt>StatementSrp.
    $$= new ClauseHolderSrp((ListSpecCatchBl *)$1, (BlockStmt *)$2);
  }
	| specific_catch_clauses.Opt general_catch_clause
  {
    // TODO: Make sure that ListSpecCatchBl>BlockListAk.
    // TODO: Make sure that BlockStmt>StatementSrp.
    $$= new ClauseHolderSrp((ListSpecCatchBl *)$1, (BlockStmt *)$2);
  }


specific_catch_clauses:
	specific_catch_clause
  { $$= new ListSpecCatchBl($1); }
	| specific_catch_clauses specific_catch_clause
  { $$->add($2); }


specific_catch_clause:
	CATCH_KW '(' class_type identifier.Opt ')' block
  {
    // TODO: Make sure that IdentifierSrp>BaseIdentifierSrp.
    // TODO: Make sure that BlockStmt>StatementSrp.
    $$= new CatchStmtHelper($3, (IdentifierSrp *)$4, (BlockStmt *)$6);
  }


general_catch_clause:
	CATCH_KW block
  { $$= $2; }


finally_clause:
	FINALLY_KW block
  { $$= $2; }


checked_statement:
	CHECKED_KW block
  {
    // TODO: Make sure that BlockStmt>StatementSrp.
    $$= new MemBoundedStmt(true, (BlockStmt *)$2);
  }


unchecked_statement:
	UNCHECKED_KW block
  {
    // TODO: Make sure that BlockStmt>StatementSrp.
    $$= new MemBoundedStmt(false, (BlockStmt *)$2);
  }


lock_statement:
	LOCK_KW '(' expression ')' embedded_statement
  { $$= new LockStmt($3, $5); }


compilation_unit:
	using_directives.Opt namespace_member_declarations.Opt


namespace_declaration:
	NAMESPACE_KW qualified_identifier namespace_body OptSemiColon


qualified_identifier:
	identifier
	{/* TODO */}
	| qualified_identifier '.' identifier


namespace_body:
	'{' using_directives.Opt namespace_member_declarations.Opt '}'


using_directives:
	using_directive
	| using_directives using_directive


using_directive:
	using_alias_directive
	| using_namespace_directive


using_alias_directive:
	USING_KW identifier '=' namespace_or_type_name ';'


using_namespace_directive:
	USING_KW namespace_name ';'


namespace_member_declarations:
	namespace_member_declaration
	| namespace_member_declarations namespace_member_declaration

namespace_member_declaration:
	namespace_declaration
	| type_declaration


type_declaration:
	class_declaration
	| struct_declaration
	| interface_declaration
	| enum_declaration
	| delegate_declaration


class_declaration:
	attributes.Opt unifiedModList.Opt CLASS_KW identifier class_base.Opt class_body OptSemiColon


class_base:
	':' class_type
	| ':' interface_type_list
	| ':' class_type ',' interface_type_list


interface_type_list:
	type_name
	{/* TODO */}
	| interface_type_list ',' type_name


class_body:
	'{' class_member_declarations.Opt '}'


class_member_declarations:
	class_member_declaration
	| class_member_declarations class_member_declaration


class_member_declaration:
	constant_declaration
	| field_declaration
	| method_declaration
	| property_declaration
	| event_declaration
	| indexer_declaration
	| operator_declaration
	| constructor_declaration
	| destructor_declaration
	| static_constructor_declaration
	| type_declaration


constant_declaration:
	attributes.Opt unifiedModList.Opt CONST_KW type constant_declarators ';'


constant_declarators:
	constant_declarator
	| constant_declarators ',' constant_declarator


constant_declarator:
	identifier '=' constant_expression
	{/* TODO */}


field_declaration:
	attributes.Opt unifiedModList.Opt type variable_declarators ';'


/* Repetition:
variable_declarators:
	variable_declarator
	| variable_declarators ',' variable_declarator
*/


/* Repetition:
variable_declarator:
	identifier
	| identifier '=' variable_initializer
*/

/* Repetition:
variable_initializer:
	expression
	| array_initializer
*/


method_declaration:
	method_header method_body


method_header:
	attributes.Opt unifiedModList.Opt return_type member_name '(' formal_parameter_list.Opt ')'


return_type:
	type
	| VOID_KW
  { $$= DictBuiltInTypes::getPredefined(DictBuiltInTypes::voidBt); }


member_name:
	dottedIdentifier

/* Simplification:
member_name:
	identifier
	| type_name '.' identifier
*/

method_body:
	block
	| ';'
  { $$= new CoreBlockStmt(); }


formal_parameter_list:
	formal_parameter
	| formal_parameter_list ',' formal_parameter


formal_parameter:
	attributes.Opt parameter_modifier.Opt type identifier


parameter_modifier:
	REF_KW
	| OUT_KW
	| PARAMS_KW


property_declaration:
	attributes.Opt unifiedModList.Opt type member_name '{' accessor_declarations '}'

/* Repetition:
member_name:
	identifier
	| type_name '.' identifier
*/

accessor_declarations:
	get_accessor_declaration set_accessor_declaration.Opt
	| set_accessor_declaration get_accessor_declaration.Opt


get_accessor_declaration:
	accessor_modifier.Opt GET_KW accessor_body


set_accessor_declaration:
	accessor_modifier.Opt SET_KW accessor_body


accessor_body:
	block
	| ';'
  { $$= new CoreBlockStmt(); }


event_declaration:
	event_field_declaration
	event_property_declaration


event_field_declaration:
	attributes.Opt unifiedModList.Opt EVENT_KW type variable_declarators ';'


event_property_declaration:
	attributes.Opt unifiedModList.Opt EVENT_KW type member_name '{' accessor_declarations '}'


indexer_declaration:
	attributes.Opt unifiedModList.Opt indexer_declarator '{' accessor_declarations '}'


indexer_declarator:
	type THIS_KW '[' formal_index_parameter_list ']'
	{/* TODO */}
	| type type_name '.' THIS_KW '[' formal_index_parameter_list ']'
	{/* TODO */}


formal_index_parameter_list:
	formal_index_parameter
	| formal_index_parameter_list ',' formal_index_parameter


formal_index_parameter:
	attributes.Opt type identifier


operator_declaration:
	attributes.Opt operator_modifiers operator_declarator block


operator_modifiers:
	PUBLIC_KW STATIC_KW
	| STATIC_KW PUBLIC_KW


operator_declarator:
	unary_operator_declarator
	| binary_operator_declarator
	| conversion_operator_declarator


unary_operator_declarator:
	type OPERATOR_KW overloadable_unary_operator '(' type identifier ')'
	{/* TODO */}

overloadable_unary_operator:
	'+'
	| '-'
	| '!'
	| '~'
	| INCR_OP
	| DECR_OP
	| TRUE_KW
	| FALSE_KW


binary_operator_declarator:
	type OPERATOR_KW overloadable_binary_operator '(' type identifier ',' type identifier ')'
	{/* TODO */}

overloadable_binary_operator:
	'+'
	| '-'
	| '*'
	| '/'
	| '%'
	| '&'
	| '|'
	| '^'
	| LSHIFT_OP
	| RSHIFT_OP
	| EQ_OP
	| NE_OP
	| '>'
	| '<'
	| GE_OP
	| LE_OP


conversion_operator_declarator:
	IMPLICIT_KW OPERATOR_KW type '(' type identifier ')'
	| EXPLICIT_KW OPERATOR_KW type '(' type identifier ')'


constructor_declaration:
	attributes.Opt unifiedModList.Opt constructor_declarator block


constructor_declarator:
	identifier '(' formal_parameter_list.Opt ')' constructor_initializer.Opt
	{/* TODO */}


constructor_initializer:
	':' BASE_KW '(' argument_list.Opt ')'
	| ':' THIS_KW '(' argument_list.Opt ')'


destructor_declaration:
	attributes.Opt '~' identifier '(' ')' block


static_constructor_declaration:
	attributes.Opt STATIC_KW identifier '(' ')' block


struct_declaration:
	attributes.Opt unifiedModList.Opt STRUCT_KW identifier struct_interfaces.Opt struct_body OptSemiColon


struct_interfaces:
	':' interface_type_list


struct_body:
	'{' struct_member_declarations.Opt '}'


struct_member_declarations:
	struct_member_declaration
	| struct_member_declarations struct_member_declaration


struct_member_declaration:
	class_member_declaration


array_type:
	non_array_type rank_specifiers


non_array_type:
	type


rank_specifiers:
	rank_specifier
  { $$= new ListSizesBl($1); }
	| rank_specifiers rank_specifier
  { ((ListSizesBl *)$$)->add($2); }


rank_specifier:
	'[' dim_separators.Opt ']'
  { $$= $2; }

dim_separators:
	','
  { $$= 1; }
	| dim_separators ','
  { $$= $$+1; }


array_initializer:
	'{' variable_initializer_list.Opt '}'
  {
    // TODO: Make sure that the class spec is OK.
    $$= new InitArrayExpr((ListExprBl *)$2);
  }
	| '{' variable_initializer_list ',' '}'
  {
    // TODO: Make sure that the class spec is OK.
    $$= new InitArrayExpr((ListExprBl *)$2);
    ((InitArrayExpr *)$$)->setContinuation();
  }


variable_initializer_list:
	variable_initializer
  { $$= new ListExprBl($1); }
	| variable_initializer_list ',' variable_initializer
  { $$->add($3); }


variable_initializer:
	expression
	| array_initializer


interface_declaration:
	attributes.Opt unifiedModList.Opt INTERFACE_KW identifier interface_base.Opt interface_body OptSemiColon


interface_base:
	':' interface_type_list


interface_body:
	'{' interface_member_declarations.Opt '}'


interface_member_declarations:
	interface_member_declaration
	| interface_member_declarations interface_member_declaration


interface_member_declaration:
	interface_method_declaration
	| interface_property_declaration
	| interface_event_declaration
	| interface_indexer_declaration


interface_method_declaration:
	attributes.Opt OptNewKeyword return_type identifier '(' formal_parameter_list.Opt ')' ';'


OptNewKeyword:
 	/* Nothing. */
	| NEW_KW


interface_property_declaration:
	attributes.Opt OptNewKeyword type identifier '{' interface_accessors '}'


interface_accessors:
	GET_KW ';'
	| SET_KW ';'
	| GET_KW ';' SET_KW ';'
	| SET_KW ';' GET_KW ';'


interface_event_declaration:
	attributes.Opt OptNewKeyword EVENT_KW type identifier ';'


interface_indexer_declaration:
	attributes.Opt OptNewKeyword type THIS_KW '[' formal_index_parameter_list ']' '{' interface_accessors '}'


enum_declaration:
	attributes.Opt unifiedModList.Opt ENUM_KW identifier enum_base.Opt enum_body OptSemiColon


enum_base:
	':' integral_type


enum_body:
	'{' enum_member_declarations.Opt '}'
	| '{' enum_member_declarations ',' '}'


enum_member_declarations:
	enum_member_declaration
	| enum_member_declarations ',' enum_member_declaration


enum_member_declaration:
	attributes.Opt identifier
	| attributes.Opt identifier '=' constant_expression


delegate_declaration:
	attributes.Opt unifiedModList.Opt DELEGATE_KW return_type identifier '(' formal_parameter_list.Opt ')' ';'


/* Simplification:
result_type:
	type
	| VOID_KW
*/


attributes:
	attribute_sections


attribute_sections:
	attribute_section
	| attribute_sections attribute_section


attribute_section:
	'[' attribute_list ']'
	| '[' attribute_list ',' ']'


attribute_list:
	attribute
	| attribute_list ',' attribute


attribute:
	attribute_name attribute_arguments.Opt
 	{/* TODO */}

attribute_name:
	/* GRMOD: reserved_attribute_name */
	identifier
	| type_name


attribute_arguments:
	'(' expression_list ')'
	| '(' expression_list ',' named_argument_list ')'
	| '(' named_argument_list ')'


/* Simplification:
positional_argument_list:
	positional_argument
	| positional_argument_list ',' positional_argument
=> Reduced into expression_list.
*/


/* Simplification:
positional_argument:
	expression
*/


named_argument_list:
	named_argument
	| named_argument_list ',' named_argument


named_argument:
	identifier '=' expression
	{/* TODO */}


/* Simplification:
attribute_argument_expression:
	expression
*/


pointer_type:
	unmanaged_type '*'
  { $$= new PointerTypeDef($1); }
	| VOID_KW '*'
  { $$= new PointerTypeDef(); }


unmanaged_type:
	value_type

/***
* Helper rules.
***/
identifier:
	IDENTIFIER


dottedIdentifier:
	identifier
	| dottedIdentifier '.' identifier


blockExprList:
	'[' expression_list ']'
  { $$= $2; }


OptSemiColon:
	/* Nothing. */
	| ';'


dim_separators.Opt:
	/* Nothing. */
  { $$= 0; }
	| dim_separators


argument_list.Opt:
	/* Nothing. */
  { $$= NULL; }
	| argument_list

 
rank_specifiers.Opt:
	/* Nothing. */
  { $$= NULL; }
	| rank_specifiers

 
array_initializer.Opt:
	/* Nothing. */
  { $$= NULL; }
	| array_initializer

 
statement_list.Opt:
	/* Nothing. */
  { $$= NULL; }
	| statement_list

 
switch_sections.Opt:
	/* Nothing. */
  { $$= NULL; }
	| switch_sections

 
for_initializer.Opt:
	/* Nothing. */
  { $$= NULL; }
	| for_initializer

 
for_condition.Opt:
	/* Nothing. */
  { $$= NULL; }
	| for_condition

 
for_iterator.Opt:
	/* Nothing. */
  { $$= NULL; }
	| for_iterator

 
expression.Opt:
	/* Nothing. */
  { $$= NULL; }
	| expression

 
general_catch_clause.Opt:
	/* Nothing. */
  { $$= NULL; }
	| general_catch_clause

 
specific_catch_clauses.Opt:
	/* Nothing. */
  { $$= NULL; }
	| specific_catch_clauses

 
identifier.Opt:
	/* Nothing. */
  { $$= NULL; }
	| identifier

 
using_directives.Opt:
	/* Nothing. */
	| using_directives

 
namespace_member_declarations.Opt:
	/* Nothing. */
	| namespace_member_declarations

 
attributes.Opt:
	/* Nothing. */
	| attributes

 
class_base.Opt:
	/* Nothing. */
	| class_base

 
class_member_declarations.Opt:
	/* Nothing. */
	| class_member_declarations

 
formal_parameter_list.Opt:
	/* Nothing. */
	| formal_parameter_list

 
parameter_modifier.Opt:
	/* Nothing. */
	| parameter_modifier

 
set_accessor_declaration.Opt:
	/* Nothing. */
	| set_accessor_declaration

 
get_accessor_declaration.Opt:
	/* Nothing. */
	| get_accessor_declaration

 
accessor_modifier.Opt:
	/* Nothing. */
	| accessor_modifier

 
constructor_initializer.Opt:
	/* Nothing. */
	| constructor_initializer

 
struct_interfaces.Opt:
	/* Nothing. */
	| struct_interfaces

 
struct_member_declarations.Opt:
	/* Nothing. */
	| struct_member_declarations

 
variable_initializer_list.Opt:
	/* Nothing. */
  { $$= NULL; }
	| variable_initializer_list

 
interface_base.Opt:
	/* Nothing. */
	| interface_base

 
interface_member_declarations.Opt:
	/* Nothing. */
	| interface_member_declarations

 
enum_base.Opt:
	/* Nothing. */
	| enum_base

 
enum_member_declarations.Opt:
	/* Nothing. */
	| enum_member_declarations

 
attribute_arguments.Opt:
	/* Nothing. */
	| attribute_arguments

blockExprList.Opt:
	/* Nothing. */
  { $$= NULL; }
	| blockExprList

accessor_modifier:
	VIRTUAL_KW
	| OVERRIDE_KW
	| ABSTRACT_KW

unifiedModList.Opt:
	/* Nothing. */
	| unifiedModList

 
unifiedModList:
	unifiedModifiers
	| unifiedModList unifiedModifiers


unifiedModifiers:
	PUBLIC_KW
	| PROTECTED_KW
	| INTERNAL_KW
	| PRIVATE_KW
	| NEW_KW
	| ABSTRACT_KW
	| SEALED_KW
	| STATIC_KW
	| READONLY_KW
	| VIRTUAL_KW
	| OVERRIDE_KW
	| ABSTRACT_KW
	| EXTERN_KW
